@precedence {
  unary,
  times @left,
  plus @left,
  set @right,
  member @left,
  transitive @left
  compare @left,
  equality @left,
  and @left,
  or @left,
  match @right,
  capture,
  inside @right,
  resulting @right,
  when @right,
  neck @left,
  default @left
}

@top Program { (moduleDefinition | expression)* }

moduleDefinition {
  kw<"defmodule"> ModuleAtom kw<"do"> inModule kw<"end">
}

inModule {
  expression |
  moduleDefinition
  functionDefinition
}

functionDefinition {
  (kw<"def"> | kw<"defp">) identifier argumentList block?
}

block {
  blockMultiline |
  blockOneLiner
}

blockMultiline {
  kw<"do"> expression* kw<"end">
}

blockOneLiner {
  "," kw<"do"> ":" expression
}

argumentList {
  "(" (
    identifier |
    (identifier "=" (Number | StringLiteral | CharlistLiteral | TupleLiteral | MapLiteral ))
  )* ")"
}

expression[@isGroup=Expression] {
  Identifier |
  Number |
  Atom |
  StringLiteral |
  CharlistLiteral |
  HeredocsLiteral |
  TupleLiteral |
  MapLiteral |

  BinaryExpression |
  UnaryExpression
}

BinaryExpression {
  expression !times op<Arith, "*" | "/"> expression |
  expression !plus op<Arith, "+" | "-"> expression |
  expression !set op<Set, "++" | "--" | "+++" | "---" | ".." | "<>"> expression |
  expression !member (kw<"in"> | (kw<"not"> kw<"in">)) expression |
  expression !transitive op<Transitive, "|>" | "<<<" | ">>>" | "<<~" | "~>>" | "<~" | "~>" | "<~>" | "<|>"> expression |
  expression !compare op<Comparison, "<" | ">" | "<=" | ">="> expression |
  expression !equality op<Equality, "==" | "!=" | "=~" | "===" | "!=="> expression |
  expression !and (op<Logic, "&&"> | Logic { kw<"and"> } | BitOp { "&&&" }) expression |
  expression !or (op<Logic, "||"> | Logic { kw<"or"> } | BitOp { "|||" }) expression |
  expression !match op<Match, "="> expression |
  expression !inside op<Inside, "|"> expression |
  expression !resulting op<TypeResult, "::"> expression |
  expression !when kw<"when"> expression |
  expression !neck op<Neck, "<-"> expression |
  expression !default op<Default, "\\"> expression
}

UnaryExpression {
  kw<"not"> !unary expression |
  op<Arith, "+" | "-"> !unary expression |
  op<Logic, "!" | "^"> !unary expression |
  op<Bit, "~~~"> !unary expression
}

Identifier {
  identifier ~identifier |
  [@dynamicPrecedence=-1] { capitalIdentifier ~identifier}
}

MapLiteral {
  "%{" mapPair ("," mapPair)* "}"
}

mapPair {
  (expression "=>" expression) |
  ((identifier | StringLiteral) ":" expression)
}

TupleLiteral {
  "{" expression ("," expression)* "}"
}

kw<term> { @specialize[@name={term}]<identifier, term> }

@skip { whitespace | LineComment }

@tokens {
  space { $[ \t]+ }

  whitespace {
    std.whitespace+
  }

  digits {
    $[0-9]+ ("_" $[0-9]+)*
  }

  hexDigits {
    $[A-Fa-f0-9]+ ("_" $[A-Fa-f0-9]+)
  }

  IntegerLiteral {
    (
      digits |
      "0x" hexDigits |
      "0o" $[0-7]+ ("_" $[0-7]+)* |
      "0b" $[01]+ ("_" $[01]+)*
    )
  }

  exponent {
    $[eE] ("-" | "+")? digits
  }

  FloatingPointLiteral {
    digits ("." digits+ exponent?)
  }

  Number {
    IntegerLiteral | FloatingPointLiteral
  }

  @precedence { FloatingPointLiteral, IntegerLiteral }

  CharlistLiteral {
    "'" (![\\'\n] | "\\" ![\n] | "\\\n")+ "'"
  }

  StringLiteral {
    "\"" (![\\"\n] | "\\" (![\n] | "\n"))+ "\""
  }

  Atom {
    ":" (identifier | StringLiteral)
  }

  ModuleAtom {
    capitalIdentifier ("." capitalIdentifier)*
  }

  heredocQuotes {
    "\"\"\""
  }

  HeredocsLiteral {
    heredocQuotes space? "\n" (![\n]+ "\n")* space? heredocQuotes
  }

  LineComment {
    "#" ![\n]*
  }

  identifier {
    $[a-z_] $[a-zA-Z0-9_]*
  }

  capitalIdentifier {
    $[A-Z] $[a-zA-Z0-9_]*
  }

  op[@name={name} "Op"]<name, body> {body}

  "(" ")" "%{" "{" "}" "[" "]" "." "," ":" "->" "=>" "<<" ">>"
}

@detectDelim
